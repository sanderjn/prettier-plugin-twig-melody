// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`arrayExpression.melody.twig - melody-verify: arrayExpression.melody.twig 1`] = `
{{ [2, 3, "cat"] }}

{{ [ 2, 3, "cat","dog",   "mouse"] }}

{{ [ 2, 3, "cat","dog", "mouse", "cake", "elephant", "zebra", 3.1415, translate('translation_key')] }}

{{ numbers[:1] }}

{{ numbers[1:4] }}

{{ numbers[1:endIndex] }}

{{ numbers[1:] }}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[object Promise]
`;

exports[`binaryExpressions.melody.twig - melody-verify: binaryExpressions.melody.twig 1`] = `
{% set highlightValueForMoney = isFeatureEnabled('vFMV5') or isCTestActive('WEB-48935') or isCTestActive('WEB-48956') or isCTestActive('WEB-48955')%}

{% set name = condition1 or condition2 and condition3 or condition4 or condition5 and condition6 %}

{% set name = condition1 and condition2 or condition3 and condition4 and condition5 or condition6 %}

<!-- indent operators -->
{% set replacement = {
    '$address': '<span itemprop="streetAddress">' ~ address_attributes.address ~ '</span>',
} %}

{% set renderLoadingBar = showNewLoadingAnimation and isCTestActive('WEB-47697') and showLoadingBar and (isABCD or isLoading)  %}

{% set result = (conditionAlpha or conditionBeta) 
            and (conditionGamma or conditionDelta) %}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[object Promise]
`;

exports[`callExpression.melody.twig - melody-verify: callExpression.melody.twig 1`] = `
{{ range(3) }}

{{ date('d/m/Y H:i', timezone="Europe/Paris") }}

<span class="{{ css.partner }}">
    <div>
        <div>
            {{
                helpers.partner(cheapestPrice.group.groupId, cheapestPrice.name.value)
            }}
        </div>
    </div>
</span>

{{ date({
    index: 5,
    isOverview: true,
    isLongPropertyName: true,
    hasBeenWaiting: true
}) }}

{{ craft.someCoolObject.someMethodToUse({ foo: 'bar', bar: 'baz', baz: 'foo' }).all() }}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[object Promise]
`;

exports[`conditionalExpression.melody.twig - melody-verify: conditionalExpression.melody.twig 1`] = `
{{ test ? "One" : "Two" }}

{{ test ? "This is a slightly longer string to overflow the line" : "and here is its counterpart" }}

{{- ratingValue == 10 ? ratingValue : ratingValue -}}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[object Promise]
`;

exports[`filterExpression.melody.twig - melody-verify: filterExpression.melody.twig 1`] = `
{{ 'test.foo' | split('.') }}
{{ range(3) | sort | join(',') }}
{{ 'SHOUTING' | lower|escape('html') | upper | escape('markdown') | lower | upper | escape('markdown') }}

{% include './usefulDeal.melody.twig' with deal | merge(
    {
        'index': loop.index0,
        'isOverview': isOverview,
        'isRTL': isRTL,
        'useWiderItems': useWiderItems
    }
) only %}

{{ (hasAdvertiserRatings
            ? 'tri_based_on' | translate({ 'iBasedOn': '<b>' ~ reviewCount ~ '</b>' })
            : 'tri_based_on_no_partners' | translate({ 'iBasedOn': '<b>' ~ reviewCount ~ '</b>' })
        ) | raw
        }}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[object Promise]
`;

exports[`memberExpression.melody.twig - melody-verify: memberExpression.melody.twig 1`] = `
{{ alternativeMarriottRewardRates[deal.dealId].short }}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[object Promise]
`;

exports[`objectExpression.melody.twig - melody-verify: objectExpression.melody.twig 1`] = `
{{ {
    a: "foo",
    "b#{ar}": "bar",
    2: 4,
    (a): foo,
} }}

<h1 class="{{ {
            ('hero__title--' ~ (locale | lower)): locale in ['CN', 'JP', 'DE', 'RU'],
        } | classes }}">Heading</h1>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[object Promise]
`;

exports[`operators.melody.twig - melody-verify: operators.melody.twig 1`] = `
{{ a b-and b }}
{{ a b-or b }}
{{ a b-xor b }}
{{ a or b }}
{{ a and b }}
{{ a == b }}
{{ a != b }}
{{ a < b }}
{{ a > b }}
{{ a >= b }}
{{ a <= b }}
{{ a in b }}
{{ a not in b }}
{{ a matches b }}
{{ a matches '^foo' }}
{{ a starts with b }}
{{ a ends with b }}
{{ a..b }}
{{ a+b }}
{{ a-b }}
{{ a~b }}
{{ a*b }}
{{ a/b }}
{{ a%b }}
{{ a ** b }}
{{ a ? b }}
{{ a ?: b }}
{{ a ?? b }}

{{ a is divisible by(b) }}
{{ a is not divisible by(b) }}
{{ a is defined }}
{{ a is not defined }}
{{ isEmpty is empty }}
{{ a is not empty }}
{{ a is even }}
{{ a is not even }}
{{ a is iterable }}
{{ a is not iterable }}
{{ a is null }}
{{ a is not null }}
{{ a is odd }}
{{ a is not odd }}
{{ a is same as(b) }}
{{ a is not same as(b) }}
{{ a is not same as(banana, apple, orange, lemonade, kiwi, coconut, pineapple, pomegrenade) }}

{{ dump(test) }}
{{ range(2, 3) | sort | join(',') }}
{{ range(3) | sort | join(',') }}
{{ range(2, 3, 2) | sort | join(',') }}
{{ test | raw }}
{{ 2.4 | abs }}
{{ { a: 'b' } | json_encode | trim }}
{{ [2, 3] | length }}
{{ 'test.foo' | split('.') }}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[object Promise]
`;

exports[`stringConcat.melody.twig - melody-verify: stringConcat.melody.twig 1`] = `
<div>
{{ first  ~   second    }}
</div>

<span data-whitespace-test="Testing: {{- noWhitespaceTest -}} foo">Test</span>

{% set calendarIcon = isNewGuestSelector ? 'icn_#{type | lower}_line_dark' : type | lower %}

{% icon 'name' with { classList: 'classA' ~ (not needsB ? ' classB') } %}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[object Promise]
`;

exports[`stringLiteral.melody.twig - melody-verify: stringLiteral.melody.twig 1`] = `
{{ 'zzz\\\\bar\\\\baz' }}

{{ "College - Women's" }}

{{ "test ' with \\\\"both\\\\" kinds" }}

{{ 'test \\\\' with "both" kinds' }}

{{ "Quoted \\\\'' unquoted" }}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[object Promise]
`;

exports[`unaryNot.melody.twig - melody-verify: unaryNot.melody.twig 1`] = `
{% if not invalid %}
    <p>All's well.</p>
{% endif %}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[object Promise]
`;
